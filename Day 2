35. Search Insert Position

class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        int start = 0;
        int end = nums.size()-1;

        int mid = start + (end-start)/2;

        while(start<=end)
        {
            if(nums[mid]==target)
                return mid;
            else if(nums[mid]<target)
                start = mid+1;
            else
                end = mid-1;

            mid = start + (end-start)/2;
        }

        return mid;
    }
};


852. Peak Index In Mountain Array

class Solution {
public:
    int peakIndexInMountainArray(vector<int>& arr) {
        int start = 1;
        int end = arr.size()-1;

        int mid = start + (end-start)/2;

        while(start<=end)
        {
            if(arr[mid-1]<arr[mid] && arr[mid+1]<arr[mid])
                return mid;
            else if(arr[mid-1]>arr[mid] && arr[mid+1]<arr[mid])
                end = mid-1;
            else if(arr[mid-1]<arr[mid] && arr[mid+1]>arr[mid])
                start = mid+1;

            mid = start + (end-start)/2;
        }

        return -1;
    }
};
